///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace TrendyolTest
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Login recording.
    /// </summary>
    [TestModule("da7341ca-6f1c-4ead-88ac-c34a680560cd", ModuleType.Recording, 1)]
    public partial class Login : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TrendyolTestRepository repository.
        /// </summary>
        public static TrendyolTestRepository repo = TrendyolTestRepository.Instance;

        static Login instance = new Login();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Login()
        {
            InputEmail = "alperenkumcu@gmail.com";
            InputPassword = "23mSBg9nC&v9nnR";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Login Instance
        {
            get { return instance; }
        }

#region Variables

        string _InputEmail;

        /// <summary>
        /// Gets or sets the value of variable InputEmail.
        /// </summary>
        [TestVariable("3e12afe3-7283-47a2-8aa1-4bffa4c6d145")]
        public string InputEmail
        {
            get { return _InputEmail; }
            set { _InputEmail = value; }
        }

        string _InputPassword;

        /// <summary>
        /// Gets or sets the value of variable InputPassword.
        /// </summary>
        [TestVariable("dd158856-b362-4024-997b-e58850145375")]
        public string InputPassword
        {
            get { return _InputPassword; }
            set { _InputPassword = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // Go to Login Page
            Report.Log(ReportLevel.Info, "Section", "Go to Login Page", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Navigate('https://www.trendyol.com/giris') on item 'trendyol'.", repo.trendyol.SelfInfo, new RecordItemIndex(1));
            repo.trendyol.Self.Navigate("https://www.trendyol.com/giris");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking WaitForDocumentLoaded() on item 'trendyol'.", repo.trendyol.SelfInfo, new RecordItemIndex(2));
            repo.trendyol.Self.WaitForDocumentLoaded();
            Delay.Milliseconds(0);
            
            // Email input
            Report.Log(ReportLevel.Info, "Section", "Email input", new RecordItemIndex(3));
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'trendyol.LoginPage.LoginEmailInput' at Center.", repo.trendyol.LoginPage.LoginEmailInputInfo, new RecordItemIndex(4));
            //repo.trendyol.LoginPage.LoginEmailInput.MoveTo();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(5));
            //Delay.Duration(1000, false);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'trendyol.LoginPage.LoginEmailInput' at Center.", repo.trendyol.LoginPage.LoginEmailInputInfo, new RecordItemIndex(6));
            //repo.trendyol.LoginPage.LoginEmailInput.Click();
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(7));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'trendyol.LoginPage.LoginEmailInput'.", repo.trendyol.LoginPage.LoginEmailInputInfo, new RecordItemIndex(8));
            repo.trendyol.LoginPage.LoginEmailInput.PerformClick();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$InputEmail' with focus on 'trendyol.LoginPage.LoginEmailInput'.", repo.trendyol.LoginPage.LoginEmailInputInfo, new RecordItemIndex(9));
            repo.trendyol.LoginPage.LoginEmailInput.PressKeys(InputEmail);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$InputEmail) on item 'trendyol.LoginPage.LoginEmailInput'.", repo.trendyol.LoginPage.LoginEmailInputInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.trendyol.LoginPage.LoginEmailInputInfo, "Value", InputEmail);
            Delay.Milliseconds(0);
            
            // Password input
            Report.Log(ReportLevel.Info, "Section", "Password input", new RecordItemIndex(11));
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'trendyol.LoginPage.LoginPasswordInput' at Center.", repo.trendyol.LoginPage.LoginPasswordInputInfo, new RecordItemIndex(12));
            //repo.trendyol.LoginPage.LoginPasswordInput.MoveTo();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(13));
            //Delay.Duration(1000, false);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'trendyol.LoginPage.LoginPasswordInput' at Center.", repo.trendyol.LoginPage.LoginPasswordInputInfo, new RecordItemIndex(14));
            //repo.trendyol.LoginPage.LoginPasswordInput.Click();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(15));
            //Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'trendyol.LoginPage.LoginPasswordInput'.", repo.trendyol.LoginPage.LoginPasswordInputInfo, new RecordItemIndex(16));
            repo.trendyol.LoginPage.LoginPasswordInput.PerformClick();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$InputPassword' with focus on 'trendyol.LoginPage.LoginPasswordInput'.", repo.trendyol.LoginPage.LoginPasswordInputInfo, new RecordItemIndex(17));
            repo.trendyol.LoginPage.LoginPasswordInput.PressKeys(InputPassword);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value=$InputPassword) on item 'trendyol.LoginPage.LoginPasswordInput'.", repo.trendyol.LoginPage.LoginPasswordInputInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.trendyol.LoginPage.LoginPasswordInputInfo, "Value", InputPassword);
            Delay.Milliseconds(0);
            
            // Click Login Button
            Report.Log(ReportLevel.Info, "Section", "Click Login Button", new RecordItemIndex(19));
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'trendyol.LoginPage.LoginButton' at Center.", repo.trendyol.LoginPage.LoginButtonInfo, new RecordItemIndex(20));
            //repo.trendyol.LoginPage.LoginButton.MoveTo();
            //Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(21));
            //Delay.Duration(1000, false);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'trendyol.LoginPage.LoginButton' at Center.", repo.trendyol.LoginPage.LoginButtonInfo, new RecordItemIndex(22));
            //repo.trendyol.LoginPage.LoginButton.Click();
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking PerformClick() on item 'trendyol.LoginPage.LoginButton'.", repo.trendyol.LoginPage.LoginButtonInfo, new RecordItemIndex(23));
            repo.trendyol.LoginPage.LoginButton.As<WebElement>().PerformClick();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(24));
            Delay.Duration(5000, false);
            
            // Validate if logged in
            Report.Log(ReportLevel.Info, "Section", "Validate if logged in", new RecordItemIndex(25));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'trendyol.MyAccountButton'.", repo.trendyol.MyAccountButtonInfo, new RecordItemIndex(26));
            Validate.Exists(repo.trendyol.MyAccountButtonInfo);
            Delay.Milliseconds(100);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating ContainsImage (Screenshot: 'MyAccountButtonScreenshot' with region {X=0,Y=0,Width=54,Height=18}) on item 'trendyol.MyAccountButton'.", repo.trendyol.MyAccountButtonInfo, new RecordItemIndex(27));
                Validate.ContainsImage(repo.trendyol.MyAccountButtonInfo, MyAccountButton_MyAccountButtonScreenshot, MyAccountButton_MyAccountButtonScreenshot_Options, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(27)); }
            
        }

#region Image Feature Data
        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage MyAccountButton_MyAccountButtonScreenshot
        { get { return repo.trendyol.MyAccountButtonInfo.GetMyAccountButtonScreenshot(new Rectangle(0, 0, 54, 18)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions MyAccountButton_MyAccountButtonScreenshot_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
